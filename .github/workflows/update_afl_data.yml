name: Update AFL Data

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs at 00:00 every Sunday
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_PAT }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libgit2-dev jq

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      
    - name: Install R dependencies
      run: |
        install.packages(c("remotes", "curl"), repos = "https://cloud.r-project.org", dependencies = TRUE)
        Sys.setenv(GITHUB_PAT = Sys.getenv("GITHUB_PAT"))
        remotes::install_github("jimmyday12/fitzRoy")
      shell: Rscript {0}
      
    - name: Run R script
      run: Rscript update_afl_data.R
      
    - name: Commit and push if changed
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git add -A
        git commit -m "Update AFL data" || exit 0
        git push https://${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git

    - name: Upload CSVs to PythonAnywhere
      env:
        PYTHONANYWHERE_TOKEN: ${{ secrets.PYTHONANYWHERE_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: Token $PYTHONANYWHERE_TOKEN" \
          -F "content=@afl_match_results.csv" \
          https://www.pythonanywhere.com/api/v0/user/testingafl/files/path/home/testingafl/afl_ranking_system/afl_match_results.csv
        curl -X POST \
          -H "Authorization: Token $PYTHONANYWHERE_TOKEN" \
          -F "content=@afl_match_results_concise.csv" \
          https://www.pythonanywhere.com/api/v0/user/testingafl/files/path/home/testingafl/afl_ranking_system/afl_match_results_concise.csv

    - name: Run update_database.py on PythonAnywhere
      env:
        PYTHONANYWHERE_TOKEN: ${{ secrets.PYTHONANYWHERE_TOKEN }}
      run: |
        # Run the script using the tasks API
        task_response=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: Token $PYTHONANYWHERE_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"command": "python /home/testingafl/afl_ranking_system/update_database.py", "enabled": true, "interval": "daily", "hour": 4, "minute": 0}' \
          https://www.pythonanywhere.com/api/v0/user/testingafl/tasks/)
        
        task_status=$(echo "$task_response" | tail -n1)
        task_body=$(echo "$task_response" | sed '$d')
        
        echo "Create task HTTP Status: $task_status"
        echo "Create task response:"
        echo "$task_body"
        
        if [ "$task_status" -ne 201 ]; then
          echo "Failed to create task. HTTP status: $task_status"
          exit 1
        fi
        
        task_id=$(echo "$task_body" | jq -r .id)
        
        if [ -z "$task_id" ]; then
          echo "Failed to extract task ID. Exiting."
          exit 1
        fi
        
        echo "Task ID: $task_id"
        
        # Wait for the task to complete (adjust sleep time as needed)
        echo "Waiting for task to complete..."
        sleep 60
        
        # Get task status
        status_response=$(curl -s -w "\n%{http_code}" -X GET \
          -H "Authorization: Token $PYTHONANYWHERE_TOKEN" \
          https://www.pythonanywhere.com/api/v0/user/testingafl/tasks/$task_id/)
        
        status_http_status=$(echo "$status_response" | tail -n1)
        status_body=$(echo "$status_response" | sed '$d')
        
        echo "Get task status HTTP Status: $status_http_status"
        echo "Task status:"
        echo "$status_body"
        
        if [ "$status_http_status" -ne 200 ]; then
          echo "Failed to get task status. HTTP status: $status_http_status"
          exit 1
        fi
        
        task_enabled=$(echo "$status_body" | jq -r .enabled)
        
        if [ "$task_enabled" = "true" ]; then
          echo "Task completed successfully"
        else
          echo "Task failed to complete"
          exit 1
        fi
        
        # Clean up: delete the task
        delete_response=$(curl -s -w "\n%{http_code}" -X DELETE \
          -H "Authorization: Token $PYTHONANYWHERE_TOKEN" \
          https://www.pythonanywhere.com/api/v0/user/testingafl/tasks/$task_id/)
        
        delete_status=$(echo "$delete_response" | tail -n1)
        
        echo "Delete task HTTP Status: $delete_status"
        
        if [ "$delete_status" -ne 204 ]; then
          echo "Failed to delete task. HTTP status: $delete_status"
          # Don't exit here, as the main task has already completed
        fi
